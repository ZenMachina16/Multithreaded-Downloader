version: '3.8'

services:
  # Redis for job queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - downloader_network

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: downloads
      POSTGRES_USER: downloader
      POSTGRES_PASSWORD: secure_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U downloader -d downloads"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - downloader_network

  # Queue-based API server
  api-server:
    build:
      context: .
      dockerfile: Dockerfile.queue
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgres://downloader:secure_password@postgres:5432/downloads?sslmode=disable
      - PORT=8080
      - GIN_MODE=release
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - downloader_network

  # Worker instances (scalable)
  worker-1:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgres://downloader:secure_password@postgres:5432/downloads?sslmode=disable
      - WORKER_ID=worker-1
    volumes:
      - downloads_data:/app/downloads
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - downloader_network

  worker-2:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgres://downloader:secure_password@postgres:5432/downloads?sslmode=disable
      - WORKER_ID=worker-2
    volumes:
      - downloads_data:/app/downloads
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - downloader_network

  worker-3:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgres://downloader:secure_password@postgres:5432/downloads?sslmode=disable
      - WORKER_ID=worker-3
    volumes:
      - downloads_data:/app/downloads
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - downloader_network

  # Optional: Redis Commander for queue monitoring
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - downloader_network

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - downloader_network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  downloads_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  downloader_network:
    driver: bridge
