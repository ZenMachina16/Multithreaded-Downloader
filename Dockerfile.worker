# Dockerfile for the worker instances
FROM golang:1.17-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    git \
    ca-certificates

# Set working directory
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the worker
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o worker \
    worker.go queue.go db.go

# Runtime stage
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    tzdata

# Create app user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Create directories
RUN mkdir -p /app/downloads /app/data && \
    chown -R appuser:appgroup /app

# Set working directory
WORKDIR /app

# Copy binary and downloader package from builder stage
COPY --from=builder --chown=appuser:appgroup /app/worker .
COPY --from=builder --chown=appuser:appgroup /app/downloader ./downloader/

# Switch to non-root user
USER appuser

# Create volume for downloads
VOLUME ["/app/downloads"]

# Run the worker
CMD ["./worker"]
